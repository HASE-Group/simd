PROJECT(
	PREAMBLE(
		 NAME "SIMD-1"
		 AUTHOR "Roland Ibbett"
		 VERSION 1.4
		 DESCRIPTION "1-dimensional array processor" 
		 )	
	PARAMLIB (

-- DEFINITION OF INSTRUCTION STRUCTURES

   STRUCT ( t_reg_args, [ RCHAR(type, 'R'), RINT(number, 0), RINT(index, 0) ] );

-- operands for load/store from/to memory using address +(index reg)
	STRUCT (t_load, [RSTRING (dest_reg, "-", 5), RSTRING (src_reg, "-", 5),
RINT (address, 0)]);
	STRUCT (t_store, [RSTRING (src_reg, "-", 5), RSTRING (dest_reg, "-", 5), RINT (address, 0)]);

-- operand for load/store register with immediate (I-type)
	STRUCT (t_loadi, [RSTRING (dest_reg, "-", 5), RINT (immediate, 0)]);

-- operand for ALDR
	STRUCT (t_loadr, [RSTRING (src_reg, "-", 5)]);

-- operands for move instruction  (R-type, but with no rs2 field) 
	STRUCT (t_move, [RSTRING (dest_reg, "-", 5), RSTRING (src_reg, "-", 5)]);

-- operands for ALU scalar ALU instruction group (R-type)
	STRUCT (t_alu,  [RSTRING (dest_reg, "-", 5),
			 RSTRING (src_reg1, "-", 5),
			 RSTRING (src_reg2, "-", 5)]);

--  operands for ALUI scalar ALU instruction group (I-type)
	STRUCT (t_alui,  [RSTRING (dest_reg, "-", 5),
			 RSTRING (src_reg1, "-", 5),
			 RINT (immediate, 0)]);

-- operands for COMP instruction  (R-type, but with no dest field)
	STRUCT (t_comp, [RSTRING (src_reg1, "-", 5), RSTRING (src_reg2, "-", 5)]);

-- operands for AALU Array instructions (neighbour or own number)
	STRUCT (t_a_alu, [RSTRING (op_source, "-", 5)]);

-- source can be:
--		 N0 (input from above 0 = no wrap around)
--		 N1 (input from above 1 = with wraparound)
--		 E0 (input from right)
--		 E1 (input from right)
--		 W0 (input from left) 
--		 W1 (input from left) 
--		 S0 (input from below)
--		 S1 (input from below)
--		 P0/1 (processor number)

--  operands for AALUM Array instructions (memory, indexed by R reg)
	STRUCT (t_a_alum, [RSTRING (src_reg, "-", 5), RINT (address, 0)]);

-- Definition of instruction set
	INSTR (t_simd_instrn_set, [(NOP),
			(JUMP, RINT (immediate, 0)),
			(JREG, RSTRING (src_reg,  "-")),
			(SETCC(SEQ,SNE,SGT,SLT,SGE,SLE), RSTRUCT (t_comp, comp_field)),
			(BRANCH, RSTRING (label, "-", 50)),
			(LDM, RSTRUCT (t_load,  load_field)),
			(LDI, RSTRUCT (t_loadi, loadi_field)),
			(ALDR, RSTRUCT (t_loadr, loadr_field)),
			(LPEC, RINT (immediate, 0)),
			(IPEC),
			(STM, RSTRUCT (t_store, store_field)),
			(MOV, RSTRUCT (t_move, move_field)),
			(ALU(ADD,SUB,MUL,DIV,AND,OR,XOR,SLL,SRL,SRA), 
			  RSTRUCT (t_alu, alu_field)),
			(ALUI(ADDI,SUBI,MULI,DIVI,ANDI,ORI,XORI,SLLI,SRLI,SRAI),			  RSTRUCT (t_alui,  alui_field)),
			(ASETPEC(ASEQ,ASNE,ASGT,ASLT,ASGE,ASLE), RINT (immediate, 0)),
			(AALU(ALD,AADD,ASUB,ABUS,AMUL,ADIV,AVID,AAND,AOR,AXOR,ASLL,ASRL,ASRA), 
			  RSTRUCT (t_a_alu, a_alu_field)),
			(AALUI(ALDI,AADDI,ASUBI,ABUSI,AMULI,ADIVI,AVIDI,AANDI,AORI,AXORI,ASLLI,ASRLI,ASRAI), 
			  RINT (immediate, 0)),
			(AALUM(ALDM,AADDM,ASUBM,ABUSM,AMULM,ADIVM,AVIDM,AANDM,AORM,AXORM,ASLLM,ASRLM,ASRAM,ASTM), 
			  RSTRUCT (t_a_alum, a_alum_field)),
			(STOP) ], function);


-- definition of memory access packet (data)
	STRUCT (t_d_mem_access, [RSTRING(status, "-"),
				 RINT(address, 0),
				 RINT(data, 0)]);

-- definition of program counter
	STRUCT (pc_struct, [RSTRING(label,"main"), RINT(offset, 0)]);

-- definition of memory access packet (instruction)
	STRUCT (t_i_mem_access, [RSTRING(status, "-"),
				 RSTRUCT(pc_struct, address)]);

-- definition of instruction memory array
	ARRAYI (instr_mem_array, t_simd_instrn_set);

-- definition of data memory array
	ARRAY (data_mem_array, int);

-- definition of programmable register
	STRUCT (t_prog_reg, [RINT(reg_value, 0)]);

-- definition of programmable register set
	ARRAY (prog_reg_set, t_prog_reg);

-- definition of links to memory
	LINK (l_to_dmem,[(D_MEM_ACCESS,RSTRUCT(t_d_mem_access,DP))]);
	LINK (l_to_imem,[(I_MEM_ACCESS,RSTRUCT(t_i_mem_access,DP))]);


-- definition of data link
	LINK (l_data,[(DATA,RINT(value,0))]);

-- definition of instruction links
	LINK(l_instr,[(INSTRUCTION,RINSTR(t_simd_instrn_set, instrn))]);
	)

	GLOBALS (
		RINSTR (t_simd_instrn_set, IRP);
		RINT(PE_CONTROL,0xFFFF);
	)

	ENTITYLIB (

		ABSTRACT Biclocked sync ( )
		ABSTRACT BiclockedD sync ( )
		ENTITY Clock sync ( )
		ENTITY Clockphase sync ( )

	ENTITY acu1 (
		EXTENDS (Biclocked)
		DESCRIPTION ("Array Control Unit")
		STATES (ACU_IDLE, ACU_BUSY)
		PARAMS (
			RRANGE (log_max_cycles, 1, 20, 10)
			RARRAY ( prog_reg_set, main_reg, 16);
			RINSTR (t_simd_instrn_set, IRA1);
			RINSTR (t_simd_instrn_set, IRA2);
			RSTRUCT ( pc_struct, PC);
			RINT (CC,0 );
			RINT (PEControl, 0xFF);
			RINT (PEC1, 0xF);
			RINT (PEC0, 0xF);
			)
		PORTS (
			PORT(instr_request,l_to_imem,SOURCE);
			PORT(instr_in,l_instr,DESTINATION);
			PORT(data_request,l_to_dmem,SOURCE);
			PORT(data_in,l_data,DESTINATION);
			)
		    );

	ENTITY memory (
		EXTENDS (Biclocked)
		DESCRIPTION ("Memory")
		STATES (M_IDLE, M_BUSY)
		PARAMS (
			read_only RINT (inst_accesstime, 1)
			RINT (I_Mem_Size, 65536);
			RARRAY ( instr_mem_array, instr_mem, I_Mem_Size);
			RINT (D_Mem_Size, 65536);
			RARRAY ( data_mem_array, data_mem, D_Mem_Size);
		)
	  	PORTS (
			PORT(instr_request,l_to_imem,DESTINATION);
			PORT(instr_out,l_instr,SOURCE);
			PORT(data_out,l_data,SOURCE);
			PORT(data_request,l_to_dmem,DESTINATION);
	  		)
		    );

	ENTITY pe1 (
		EXTENDS (Biclocked)
		DESCRIPTION ("Processing Element")
		STATES (PE1_IDLE, PE1_OFF, PE1_BUSY)
		PARAMS (
			RINT (ACC, 0);
			RINT (PE_Mem_Size, 1024);
			RARRAY (data_mem_array, pe_mem, PE_Mem_Size);
			)
		PORTS (
			PORT ( to_right, l_data, SOURCE)
			PORT ( from_left, l_data, DESTINATION)
			PORT ( to_left, l_data, SOURCE)
			PORT ( from_right, l_data, DESTINATION)
			)
		    );

	MESH1D simd1 (
			ENTITY_TYPE (pe1)
			SIZE1 (8)
			      NO_LINKS(2)
			      WRAP(1)
			      DESCRIPTION("1-dimensional array processor")
			      PARAMS()
			)		  
	)

	STRUCTURE(

	AENTITY acu1 ACU ( DESCRIPTION ("Array Control Unit"));

	AENTITY memory MEMORY ( DESCRIPTION ("CU Memory"));

	AENTITY simd1 SIMD1 (DESCRIPTION("1D Array Processor"));
	
	AENTITY Clock CLOCK ( DESCRIPTION ("Clock"));

	AENTITY Clockphase CPHASE (DESCRIPTION ("Clock display"));

	CLINK(acu1.ACU[instr_request]->memory.MEMORY[instr_request],1);
	CLINK(acu1.ACU[data_request]->memory.MEMORY[data_request],1);
	CLINK(memory.MEMORY[instr_out]->acu1.ACU[instr_in],1);
	CLINK(memory.MEMORY[data_out]->acu1.ACU[data_in],1);
	)
)


