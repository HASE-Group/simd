
// Project:	1d-Array Processor
// Entity	Processing Element
// File		pe1.hase
// Date:	Nov 2005,  revised Mar 2014

// needs to access PE_CONTROL and instructions to set/reset control bits
// ACU also needs instructions to load PE_CONTROL

// AALU Instructions operate on an Accumulator (ACC) using a value obtained
// from N, E, W, S, or P
// N0/1 = output from PE above		// = TOP in HASE definitions
// E0/1 = output from PE to right
// W0/1 = output from PE to left
// S0/1 = output from PE below		// = BOTTOM in HASE definitions
// P0/1 = processor's own number
// where for NEWS operands 0= no wrap around, 1 = wrap around

// AALUM Instructions operate on an Accumulator (ACC) using a value obtained

// M = memory location
// I = Immediate 


$class_decls

//structures and variables

  bool input_left, input_right;
//  bool input_top, input_bottom;
  bool output_data;
  bool address_error, div_error;

  char direction, wrap;

  int my_pec;
  int l_input, r_input;
//  int t_input, b_input;
  int left_data, right_data;
//  int top_data, bottom_data;
  int address, operand, sign_ext, op_mask;

  int old_state;
  char* name;
  int proc_no; 
  int select, pec_select, mask_mask;

int ReadACC() {return ACC;}

void WriteACC (int value);


//classes

$class_defs

void pe1::WriteACC (int value)
	{ACC = value;
	 dump_state();
	}
$pre

  my_state = PE1_IDLE;

  name = get_name();

       if (strcmp(name,"SIMD1._0_") == 0)
	{proc_no = 0;}
  else if (strcmp(name,"SIMD1._1_") == 0)
	{proc_no = 1;}
  else if (strcmp(name,"SIMD1._2_") == 0)
  	{proc_no = 2;}
  else if (strcmp(name,"SIMD1._3_") == 0)
	{proc_no = 3;}
  else if (strcmp(name,"SIMD1._4_") == 0)
	{proc_no = 4;}
  else if (strcmp(name,"SIMD1._5_") == 0)
	{proc_no = 5;}
  else if (strcmp(name,"SIMD1._6_") == 0)
	{proc_no = 6;}
  else if (strcmp(name,"SIMD1._7_") == 0)
	{proc_no = 7;}


	pec_select = 1 << (7 - proc_no);
	my_pec = pec_select;

	ACC = 0;
	left_data = 0;
	right_data = 0;
//	top_data = 0;
//	bottom_data = 0;
	output_data = false;
	address_error = false;
	div_error = false;
	dump_state();

$phase0

  sim_hold(1);

    my_pec = PE_CONTROL & pec_select;	// to ensure that updates caused
    dump_state();			// by LPEC orders are made visible


// predicates for use in sim_waiting test

//  sim_from_port N_Input(from_top);	    
  sim_from_port E_Input(from_right);	    
  sim_from_port W_Input(from_left);	    
//  sim_from_port S_Input(from_bottom);	    

    // DEAL WITH INPUT

  if  (sim_waiting(ev, W_Input) > 0)
     {
	SIM_CAST_DEL(int, l_input, ev);
	left_data = l_input;
      }

  if  (sim_waiting(ev, E_Input) > 0)
     {
	SIM_CAST_DEL(int, r_input, ev);
	right_data = r_input;
     }

  if ( IRP.decode_AALU() ) // operations using neighbour results or proc no
   {
    select = PE_CONTROL & pec_select;	// used for printing
    if ((PE_CONTROL & pec_select) == pec_select)
      {
	my_state = PE1_BUSY;
	dump_state();
	direction = (char) IRP.a_alu_field.op_source[0];
	wrap = (char) IRP.a_alu_field.op_source[1];
	if ( (proc_no == 0) && ( wrap == '0') )
 	 {left_data = 0;}
	if ( (proc_no == 7) &&  ( wrap == '0') )
	 {right_data = 0;}

	if (direction == 'W')
	 {operand = left_data;}
	else if (direction == 'E')
	 {operand = right_data;}
	else if (direction == 'P')
	 {operand = proc_no;}
	

	  if (IRP.function ==  t_simd_instrn_set::ALD)	// ACC = operand
	   {ACC = operand;}

	  if (IRP.function ==  t_simd_instrn_set::AADD)	// ACC = ACC + operand 
	   {ACC = ACC + operand;}

	  if (IRP.function ==  t_simd_instrn_set::ASUB)	// ACC = ACC - operand 
	   {ACC = ACC - operand;}

	  if (IRP.function ==  t_simd_instrn_set::ABUS)	// ACC = operand - ACC
	   {ACC = operand - ACC;}

	  if (IRP.function ==  t_simd_instrn_set::AMUL)	// ACC = ACC * operand 
	   {ACC = ACC * operand;}

	  if (IRP.function ==  t_simd_instrn_set::AVID)	// ACC = operand / ACC
	   {
		if (ACC == 0)
		 {div_error = true;
		  stopSimulation(0);}
		else
		 {ACC = operand / ACC;}
	  }

	  if (IRP.function ==  t_simd_instrn_set::ADIV)	// ACC = ACC / operand 
	   {
		if (operand == 0)
		 {div_error = true;
		  stopSimulation(0);}
		else
		 {ACC = ACC / operand;}
	   }

	  if (IRP.function ==  t_simd_instrn_set::AAND)	// ACC = ACC & operand 
	   {ACC = ACC & operand;}

	  if (IRP.function ==  t_simd_instrn_set::AOR)	// ACC = ACC OR operand 
	   {ACC = ACC | operand;}

	  if (IRP.function ==  t_simd_instrn_set::AXOR)	// ACC = ACC XOR operand 
	   {ACC = ACC ^ operand;}

	  if (IRP.function ==  t_simd_instrn_set::ASLL)
					// ACC = ACC Shift Left Logical by operand 
	   {ACC = ACC << operand;}

	  if (IRP.function ==  t_simd_instrn_set::ASRL)
				// ACC = ACC Shift Right Logical by operand 
	   {
		op_mask = -1 ^ ( ( (pow (2, operand)) - 1) << (32 - operand));
		ACC = (ACC >> operand) & op_mask;
	   }

	  if (IRP.function ==  t_simd_instrn_set::ASRA)
				// ACC = ACC Shift Right Arithmetic by operand 
	   {
		sign_ext = ACC & (1 << 31);
		op_mask = ( (pow (2, operand)) - 1) << (32 - operand);
		ACC = ACC >> operand;
			if (sign_ext != 0)
			{ACC = ACC | op_mask;}
	   }

	output_data = true;

      } 	// end of if select & pec_select
   }	// end of AALU

  if ( IRP.decode_AALUI() ) // operations using a literal operand
   {
    select = PE_CONTROL & pec_select;	// used for printing
       if ((PE_CONTROL & pec_select) == pec_select)
	{
	my_state = PE1_BUSY;
	dump_state();
	operand = IRP.immediate;

	  if (IRP.function ==  t_simd_instrn_set::ALDI)
		{ACC = operand;}

	  if (IRP.function ==  t_simd_instrn_set::AADDI)
	   {ACC = ACC + operand;}

	  if (IRP.function ==  t_simd_instrn_set::ASUBI)	// ACC = ACC - operand 
		{ACC = ACC - operand;}

	  if (IRP.function ==  t_simd_instrn_set::ABUSI)	// ACC = operand - ACC
		{ACC = operand - ACC;}

	  if (IRP.function ==  t_simd_instrn_set::AMULI)	// ACC = ACC * operand 
		{ACC = ACC * operand;}

	  if (IRP.function ==  t_simd_instrn_set::ADIVI)	// ACC = ACC / operand 
	   {
		if (operand == 0)
		 {div_error = true;
		  stopSimulation(0);}
		else
		 {ACC = ACC / operand;}
           }

	  if (IRP.function ==  t_simd_instrn_set::AVIDI)	// ACC = operand / ACC
	   {
		if (ACC == 0)
		 {div_error = true;
		  stopSimulation(0);}
		else
		 {ACC = operand / ACC;}
	   }

	  if (IRP.function ==  t_simd_instrn_set::AANDI)	// ACC = ACC & operand 
		{ACC = ACC & operand;}

	  if (IRP.function ==  t_simd_instrn_set::AORI)	// ACC = ACC OR operand 
		{ACC = ACC | operand;}

	  if (IRP.function ==  t_simd_instrn_set::AXORI)
				// ACC = ACC XOR operand 
		{ACC = ACC ^ operand;}

	  if (IRP.function ==  t_simd_instrn_set::ASLLI)
				// ACC = ACC Shift Left Logical by operand	 
		{ACC = ACC << operand;}

	  if (IRP.function ==  t_simd_instrn_set::ASRLI)
				// ACC = ACC Shift Right Logical by operand 
		{
		op_mask = -1 ^ ( ( (pow (2, operand)) - 1) << (32 - operand));
		ACC = (ACC >> operand) & op_mask;
		}

	  if (IRP.function ==  t_simd_instrn_set::ASRAI)
				// ACC = ACC Shift Right Arithmetic by operand 
	   {
		sign_ext = ACC & (1 << 31);
		op_mask = ( (pow (2, operand)) - 1) << (32 - operand);
		ACC = ACC >> operand;
			if (sign_ext != 0)
			{ACC = ACC | op_mask;}
		}

	output_data = true;
     } // end of if mask & pec_select
  } // end of if AALUI

  if ( IRP.decode_AALUM() ) // operations using a value in memory 
   {
    select = PE_CONTROL & pec_select;	// used for printing
       if ((PE_CONTROL & pec_select) == pec_select)
	{
	my_state = PE1_BUSY;
	dump_state();
	address = IRP.a_alum_field.address;
	if (address >= 0 && (address < PE_Mem_Size))
	 {operand = pe_mem[address];}
	else
	 {address_error = true;}
	output_data = true;

	 {
	  if (IRP.function ==  t_simd_instrn_set::ALDM)
		{ACC = operand;}

	  if (IRP.function ==  t_simd_instrn_set::AADDM)
		{ACC = ACC + operand;}

	  if (IRP.function ==  t_simd_instrn_set::ASUBM)	// ACC = ACC - operand 
		{ACC = ACC - operand;}

	  if (IRP.function ==  t_simd_instrn_set::ABUSM)	// ACC = operand - ACC
		{ACC = operand - ACC;}

	  if (IRP.function ==  t_simd_instrn_set::AMULM)	// ACC = ACC * operand 
		{ACC = ACC * operand;}

	  if (IRP.function ==  t_simd_instrn_set::ADIVM)	// ACC = ACC / operand 
		{ACC = ACC / operand;}

	  if (IRP.function ==  t_simd_instrn_set::AVIDM)	// ACC = operand /  ACC
		{ACC = operand / ACC;}

	  if (IRP.function ==  t_simd_instrn_set::AANDM)	// ACC = ACC & operand 
		{ACC = ACC & operand;}

	  if (IRP.function ==  t_simd_instrn_set::AORM)	// ACC = ACC OR operand 
		{ACC = ACC | operand;}

	  if (IRP.function ==  t_simd_instrn_set::AXORM)	// ACC = ACC XOR operand 
		{ACC = ACC ^ operand;}

	  if (IRP.function ==  t_simd_instrn_set::ASLLM)	// ACC = ACC Shift Left Logical by operand	 
		{ACC = ACC << operand;}

	  if (IRP.function ==  t_simd_instrn_set::ASRLM)	// ACC = ACC Shift Right Logical by operand 
	   {
		op_mask = -1 ^ ( ( (pow (2, operand)) - 1) << (32 - operand));
		ACC = (ACC >> operand) & op_mask;
	   }

	  if (IRP.function ==  t_simd_instrn_set::ASRAM)	// ACC = ACC Shift Right Arithmetic by operand 
//		ACC >> operand;
	   {
		sign_ext = ACC & (1 << 31);
		op_mask = ( (pow (2, operand)) - 1) << (32 - operand);
		ACC = ACC >> operand;
			if (sign_ext != 0)
			{ACC = ACC | op_mask;}
		}
	  if (IRP.function ==  t_simd_instrn_set::ASTM)
	   {
		pe_mem.Update(IRP.a_alum_field.address, ACC);
		output_data = false;
	   }
	}
     } // end of if mask & pec_select
  } // end of if AALUM


  if  (IRP.decode_ASETPEC())	// sets PE Control bit if condition
				// between ACC and operand is true
      {
	my_pec = 0;
	output_data = false;

	  if (IRP.function ==  t_simd_instrn_set::ASEQ)		// ACC = operand
	   {
	 	my_state = PE1_BUSY;
		dump_state();
		operand = IRP.immediate;
		if (ACC == operand)
		{
		 PE_CONTROL = PE_CONTROL | pec_select;
	         my_pec = pec_select;
		}
	   }

	  if (IRP.function ==  t_simd_instrn_set::ASNE)		// ACC != operand
	   {
	 	my_state = PE1_BUSY;
		dump_state();
		operand = IRP.immediate;
		if (ACC != operand)
		{
		 PE_CONTROL = PE_CONTROL | pec_select;
	         my_pec = pec_select;
		}
	   }

	  if (IRP.function ==  t_simd_instrn_set::ASGT)			// ACC > operand
	   {
	 	my_state = PE1_BUSY;
		dump_state();
		operand = IRP.immediate;
		if (ACC > operand)
		{
		 PE_CONTROL = PE_CONTROL | pec_select;
	         my_pec = pec_select;
		}
	   }

	  if (IRP.function ==  t_simd_instrn_set::ASLT)			// ACC < operand
	   {
	 	my_state = PE1_BUSY;
		dump_state();
		operand = IRP.immediate;
		if (ACC < operand)
		{
		 PE_CONTROL = PE_CONTROL | pec_select;
	         my_pec = pec_select;
		}
	   }

	  if (IRP.function ==  t_simd_instrn_set::ASGE)			// ACC >= operand
	   {
	 	my_state = PE1_BUSY;
		dump_state();
		operand = IRP.immediate;
		if (ACC >= operand)
		{
		 PE_CONTROL = PE_CONTROL | pec_select;
	         my_pec = pec_select;
		}
	   }

	  if (IRP.function ==  t_simd_instrn_set::ASLE)			// ACC <= operand
	   {
	 	my_state = PE1_BUSY;
		dump_state();
		operand = IRP.immediate;
		if (ACC <= operand)
		{
		 PE_CONTROL = PE_CONTROL | pec_select;
	         my_pec = pec_select;
		}
	   }
	}	// end of IRP decode

	 if (my_state != old_state)
	  {dump_state();
	   old_state = my_state;}


	// end of ClockPhase = 0

$phase1

 if (output_data) {		//  send data value to neighbours
	  send_DATA(to_left, ACC);
	  send_DATA(to_right, ACC);
	  output_data = false;
	  }

  if (my_pec == pec_select)		// update state
   {my_state = PE1_IDLE;}
  else
   {my_state = PE1_OFF;}
  dump_state();

	// end of  ClockPhase 1

$report

  if (address_error)
   {printf("Simulation aborted: invalid PE memory address\n");}

  if (div_error)
   {printf("Simulation aborted: attempted divide by zero\n");}
